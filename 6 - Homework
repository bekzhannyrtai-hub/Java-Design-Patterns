java
import java.util.*;

interface IPaymentStrategy {
    void pay(double amount);
}

class CreditCardPayment implements IPaymentStrategy {
    private String cardNumber;
    private String cardHolder;
    
    public CreditCardPayment(String cardNumber, String cardHolder) {
        this.cardNumber = cardNumber;
        this.cardHolder = cardHolder;
    }
    
    @Override
    public void pay(double amount) {
        System.out.println("Оплата " + amount + " руб. банковской картой " + cardNumber + " владельца " + cardHolder);
    }
}

class PayPalPayment implements IPaymentStrategy {
    private String email;
    
    public PayPalPayment(String email) {
        this.email = email;
    }
    
    @Override
    public void pay(double amount) {
        System.out.println("Оплата " + amount + " руб. через PayPal аккаунт " + email);
    }
}

class CryptoPayment implements IPaymentStrategy {
    private String walletAddress;
    
    public CryptoPayment(String walletAddress) {
        this.walletAddress = walletAddress;
    }
    
    @Override
    public void pay(double amount) {
        System.out.println("Оплата " + amount + " руб. криптовалютой на кошелек " + walletAddress);
    }
}

class PaymentContext {
    private IPaymentStrategy strategy;
    
    public void setPaymentStrategy(IPaymentStrategy strategy) {
        this.strategy = strategy;
    }
    
    public void executePayment(double amount) {
        if (strategy == null) {
            System.out.println("Стратегия оплаты не выбрана");
            return;
        }
        strategy.pay(amount);
    }
}

interface IObserver {
    void update(String currency, double rate);
}

interface ISubject {
    void registerObserver(IObserver observer);
    void removeObserver(IObserver observer);
    void notifyObservers();
}

class CurrencyExchange implements ISubject {
    private List<IObserver> observers = new ArrayList<>();
    private Map<String, Double> exchangeRates = new HashMap<>();
    
    public void setExchangeRate(String currency, double rate) {
        exchangeRates.put(currency, rate);
        notifyObservers();
    }
    
    public double getExchangeRate(String currency) {
        return exchangeRates.getOrDefault(currency, 0.0);
    }
    
    @Override
    public void registerObserver(IObserver observer) {
        observers.add(observer);
    }
    
    @Override
    public void removeObserver(IObserver observer) {
        observers.remove(observer);
    }
    
    @Override
    public void notifyObservers() {
        for (IObserver observer : observers) {
            for (Map.Entry<String, Double> entry : exchangeRates.entrySet()) {
                observer.update(entry.getKey(), entry.getValue());
            }
        }
    }
}

class Bank implements IObserver {
    private String name;
    
    public Bank(String name) {
        this.name = name;
    }
    
    @Override
    public void update(String currency, double rate) {
        System.out.println("Банк '" + name + "' обновил курс " + currency + ": " + rate);
    }
}

class MobileApp implements IObserver {
    private String appName;
    
    public MobileApp(String appName) {
        this.appName = appName;
    }
    
    @Override
    public void update(String currency, double rate) {
        System.out.println("Мобильное приложение '" + appName + "' получило обновление курса " + currency + ": " + rate);
    }
}

class TradingPlatform implements IObserver {
    private String platformName;
    
    public TradingPlatform(String platformName) {
        this.platformName = platformName;
    }
    
    @Override
    public void update(String currency, double rate) {
        System.out.println("Торговая платформа '" + platformName + "' обработала изменение курса " + currency + " на " + rate);
    }
}

public class Main {
    public static void main(String[] args) {
        System.out.println("=== ДЕМОНСТРАЦИЯ ПАТТЕРНА СТРАТЕГИЯ ===");
        
        PaymentContext paymentContext = new PaymentContext();
        
        paymentContext.setPaymentStrategy(new CreditCardPayment("1234-5678-9012-3456", "Иван Иванов"));
        paymentContext.executePayment(1500.50);
        
        paymentContext.setPaymentStrategy(new PayPalPayment("user@example.com"));
        paymentContext.executePayment(2750.00);
        
        paymentContext.setPaymentStrategy(new CryptoPayment("1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"));
        paymentContext.executePayment(500.75);
        
        System.out.println("\n=== ДЕМОНСТРАЦИЯ ПАТТЕРНА НАБЛЮДАТЕЛЬ ===");
        
        CurrencyExchange currencyExchange = new CurrencyExchange();
        
        Bank sberbank = new Bank("Сбербанк");
        MobileApp myFinance = new MobileApp("Мои Финансы");
        TradingPlatform alpari = new TradingPlatform("Alpari");
        
        currencyExchange.registerObserver(sberbank);
        currencyExchange.registerObserver(myFinance);
        currencyExchange.registerObserver(alpari);
        
        System.out.println("\n--- Обновление курсов валют ---");
        currencyExchange.setExchangeRate("USD", 92.5);
        currencyExchange.setExchangeRate("EUR", 99.8);
        
        System.out.println("\n--- Удаляем мобильное приложение и обновляем курс ---");
        currencyExchange.removeObserver(myFinance);
        currencyExchange.setExchangeRate("USD", 93.2);
        
        System.out.println("\n--- Добавляем нового наблюдателя и обновляем курс ---");
        Bank tinkoff = new Bank("Тинькофф");
        currencyExchange.registerObserver(tinkoff);
        currencyExchange.setExchangeRate("EUR", 100.1);
    }
}
