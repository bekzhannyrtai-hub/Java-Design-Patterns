import java.util.*;

interface Command {
    void execute();
    void undo();
}

class Light {
    void on() { System.out.println("Свет включен"); }
    void off() { System.out.println("Свет выключен"); }
}

class Door {
    void open() { System.out.println("Дверь открыта"); }
    void close() { System.out.println("Дверь закрыта"); }
}

class Thermostat {
    private int temperature = 22;
    void increase() {
        temperature++;
        System.out.println("Температура увеличена до " + temperature + "°C");
    }
    void decrease() {
        temperature--;
        System.out.println("Температура уменьшена до " + temperature + "°C");
    }
}

class LightOnCommand implements Command {
    private final Light light;
    LightOnCommand(Light light) { this.light = light; }
    public void execute() { light.on(); }
    public void undo() { light.off(); }
}

class DoorOpenCommand implements Command {
    private final Door door;
    DoorOpenCommand(Door door) { this.door = door; }
    public void execute() { door.open(); }
    public void undo() { door.close(); }
}

class IncreaseTempCommand implements Command {
    private final Thermostat thermostat;
    IncreaseTempCommand(Thermostat thermostat) { this.thermostat = thermostat; }
    public void execute() { thermostat.increase(); }
    public void undo() { thermostat.decrease(); }
}

class RemoteControl {
    private final Stack<Command> history = new Stack<>();
    void executeCommand(Command command) {
        command.execute();
        history.push(command);
    }
    void undoLast() {
        if (!history.isEmpty()) {
            history.pop().undo();
        } else {
            System.out.println("Нет команд для отмены!");
        }
    }
}

class CommandPatternDemo {
    public static void main(String[] args) {
        Light light = new Light();
        Door door = new Door();
        Thermostat thermostat = new Thermostat();
        RemoteControl control = new RemoteControl();
        control.executeCommand(new LightOnCommand(light));
        control.executeCommand(new DoorOpenCommand(door));
        control.executeCommand(new IncreaseTempCommand(thermostat));
        control.undoLast();
        control.undoLast();
    }
}

abstract class Beverage {
    public final void prepareRecipe() {
        boilWater();
        brew();
        pourInCup();
        if (customerWantsCondiments()) {
            addCondiments();
        }
    }
    void boilWater() { System.out.println("Кипятим воду"); }
    void pourInCup() { System.out.println("Наливаем в чашку"); }
    abstract void brew();
    abstract void addCondiments();
    boolean customerWantsCondiments() { return true; }
}

class Tea extends Beverage {
    void brew() { System.out.println("Завариваем чай"); }
    void addCondiments() { System.out.println("Добавляем лимон"); }
}

class Coffee extends Beverage {
    void brew() { System.out.println("Завариваем кофе"); }
    void addCondiments() { System.out.println("Добавляем сахар и молоко"); }
    boolean customerWantsCondiments() { return true; }
}

class TemplateMethodDemo {
    public static void main(String[] args) {
        Beverage tea = new Tea();
        Beverage coffee = new Coffee();
        System.out.println("\nПриготовление чая:");
        tea.prepareRecipe();
        System.out.println("\nПриготовление кофе:");
        coffee.prepareRecipe();
    }
}

interface Mediator {
    void sendMessage(String message, User sender);
    void addUser(User user);
}

class ChatRoom implements Mediator {
    private final List<User> users = new ArrayList<>();
    public void addUser(User user) { users.add(user); }
    public void sendMessage(String message, User sender) {
        for (User u : users) {
            if (u != sender) {
                u.receive(message);
            }
        }
    }
}

abstract class User {
    protected Mediator mediator;
    protected String name;
    public User(Mediator mediator, String name) {
        this.mediator = mediator;
        this.name = name;
    }
    public abstract void send(String message);
    public abstract void receive(String message);
}

class ChatUser extends User {
    public ChatUser(Mediator mediator, String name) {
        super(mediator, name);
    }
    public void send(String message) {
        System.out.println(name + " отправляет: " + message);
        mediator.sendMessage(message, this);
    }
    public void receive(String message) {
        System.out.println(name + " получает: " + message);
    }
}

public class MediatorPatternDemo {
    public static void main(String[] args) {
        ChatRoom chatRoom = new ChatRoom();
        User user1 = new ChatUser(chatRoom, "Айжан");
        User user2 = new ChatUser(chatRoom, "Нұртай");
        User user3 = new ChatUser(chatRoom, "Ермек");
        chatRoom.addUser(user1);
        chatRoom.addUser(user2);
        chatRoom.addUser(user3);
        user1.send("Сәлем, бәріне!");
        user3.send("Сәлем, Айжан!");
    }
}
